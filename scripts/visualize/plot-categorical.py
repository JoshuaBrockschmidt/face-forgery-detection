#!/usr/bin/env python3


"""
Plots accuracies from the CSV file generated by `scripts/experiments/test-categorical.py`.
Displays plots on screen.
"""

import argparse
import csv
from matplotlib.lines import Line2D
from matplotlib.ticker import FormatStrFormatter
import matplotlib.pyplot as plt
import numpy as np
import os
from sys import stderr

from common import CLASS_TO_COLOR, CLASS_TO_LABEL

HEADERS = ('mtype', 'classes', 'bin_acc', 'cat_acc', 'cat_bin_acc')
CLASSES = ('f2f', 'df', 'fs', 'icf', 'gann', 'x2f')
GUIDE_COLOR = (0.9, 0.9, 0.9)

HINDEX = {v: i for i, v in enumerate(HEADERS)}

def load_model_data(csv_path):
    """
    Loads model results from a CSV file created by
    `scripts/experiments/test-categorical.py`.

    Args:
        csv_path: Path to CSV file.

    Returns:
        A dictionary mapping model name -> classes -> {binary accuracy,
            categorical accuracy, categorical-binary accuracy}
    """
    models = {}
    with open(csv_path, 'r') as f:
        reader = csv.reader(f, delimiter=',', quotechar='"')

        # Skip the headers.
        next(reader)

        for row in reader:
            mtype = row[HINDEX['mtype']]
            classes = row[HINDEX['classes']]
            if mtype not in models:
                models[mtype] = {}
            results = {
                'bin_acc' : row[HINDEX['bin_acc']],
                'cat_acc' : row[HINDEX['cat_acc']],
                'cat_bin_acc' : row[HINDEX['cat_bin_acc']]
            }
            models[mtype][classes] = results

    return models

def plot_accuracies(models):
    """
    Plot a bar graph with the three accuracies for all models.

    Args:
        models: A dictionary returned by `load_model_data`.

    Returns:
        Matplotlib figure and axes.
    """
    BAR_WIDTH = 0.2
    METRICS = ('bin_acc', 'cat_acc', 'cat_bin_acc')
    METRIC_TO_COLOR = {
        'bin_acc'     : (0.5, 0, 0.5),  # Purple
        'cat_acc'     : (1, 0, 0),      # Red
        'cat_bin_acc' : (0, 0, 1)       # Blue
    }
    METRIC_TO_LABEL = {
        'bin_acc' : 'Binary accuracy',
        'cat_acc' : 'Categorical accuracy',
        'cat_bin_acc' : 'Binary accuracy of categorical classifier'
    }

    fig, ax = plt.subplots()
    ax.set_xlabel('Classes')
    ax.set_ylabel('Accuracy')
    ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))

    mtype = list(models.keys())[0]
    xs = np.arange(len(models[mtype])) - BAR_WIDTH
    x_labels = []
    y_min = 1.0
    names = sorted(list(models[mtype].keys()))
    for name in names:
        # Construct label.
        class_labels = [CLASS_TO_LABEL[c] for c in name.split(',')]
        if len(class_labels) == len(models[mtype].keys()):
            x_labels.append('All');
        else:
            x_labels.append('\n'.join(class_labels))

    # Collect accuracies.
    for i, metric in enumerate(METRICS):
        ys = []
        for name in names:
            m = float(models[mtype][name][metric])
            ys.append(m)
            y_min = min(y_min, m)
        ax.bar(xs + (BAR_WIDTH * i), ys, BAR_WIDTH,
               color=METRIC_TO_COLOR[metric],
               label=METRIC_TO_LABEL[metric])

    ax.set_xticks(np.arange(len(x_labels)))
    ax.set_xticklabels(x_labels)
    ax.set_ylim((y_min - 0.05, 1.005))

    # Add guidelines for the Y ticks.
    ax.set_axisbelow(True)
    ax.yaxis.grid(color=GUIDE_COLOR, linestyle='-')

    # Make more room for labels.
    fig.subplots_adjust(bottom=0.3)

    ax.legend()

    return fig, ax

def main(csv_path):
    """
    Creates and displays various plots using the supplied experimentation data.
    """
    models = load_model_data(csv_path)
    plot_accuracies(models)
    plt.show()

if __name__ == '__main__':
    desc = 'Plots categorical accuracies versus binary accuracies'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('input', type=str, nargs=1,
                        help='path to CSV file with compression data')
    args = parser.parse_args()

    csv_path = args.input[0]

    if not os.path.isfile(csv_path):
        print('"{}" is not a file'.format(csv_path), file=stderr)
        exit(2)

    main(csv_path)
