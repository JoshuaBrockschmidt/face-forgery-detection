"""
Utility functions for interpretting dataset splits
(i.e. training, testing, and validation sets)
"""

import os
import json

def read_split(split_path):
    """
    Reads a JSON file containing split information.

    Args:
        split_path: Path to JSON file.

    Return:
        A list of video ID pairs in the form [id1, id2].
    """
    with open(split_path) as f:
        pairs = json.load(f)
    return pairs
    
def get_splits(split_dir):
    """
    Read the training, testing, and validation splits.

    Args:
        split_dir: Directory containing `train.json`, `test.json`,
            and `val.json`.

    Returns:
        3 lists, (train, test, val), for the training, testing, and validation sets,
        all in the format returned by `read_split`.
    """
    train = read_split(os.path.join(split_dir, 'train.json'))
    test = read_split(os.path.join(split_dir, 'test.json'))
    val = read_split(os.path.join(split_dir, 'val.json'))
    return train, test, val

def get_orig_paths(videos_dir, split, comp):
    """
    Gets paths to all original videos.

    Args:
        videos_dir: Directory containing folders for each compression level of
            the original videos.
        split: List of pairs of video IDs, as generated by `get_splits`.
        comp: Compression level of videos, i.e. `c0`, `c23`, or `c40`.

    Returns:
        A list of video paths.
    """
    comp_dir = os.path.join(videos_dir, comp, 'videos')
    paths = []
    for source_id, driver_id in split:
        paths.append(os.path.join(comp_dir, '{}.mp4'.format(source_id)))
        paths.append(os.path.join(comp_dir, '{}.mp4'.format(driver_id)))
    return paths

def get_mani_paths(videos_dir, split, comp):
    """
    Gets paths to all videos in a split for a particular class of
    manipulated videos.

    Args:
        videos_dir: Directory containing folders for each compression level of
            a class of manipulated videos.
        split: List of pairs of video IDs, as generated by `get_splits`.
        comp: Compression level of videos, i.e. `c0`, `c23`, or `c40`.

    Returns:
        A list of video paths.
    """
    comp_dir = os.path.join(videos_dir, comp, 'videos')
    paths = []
    for source_id, driver_id in split:
        paths.append(
            os.path.join(comp_dir, '{}_{}.mp4'.format(source_id, driver_id)))
        paths.append(
            os.path.join(comp_dir, '{}_{}.mp4'.format(driver_id, source_id)))
    return paths
